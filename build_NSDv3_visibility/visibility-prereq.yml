# One Convergence, Inc. CONFIDENTIAL                                                                                
#1;3409;0c Copyright (c) 2012-2014, One Convergence, Inc., USA                                                               
# All Rights Reserved.                                                                                              
#                                                                                                                   
# All information contained herein is, and remains the property of                                                  
# One Convergence, Inc. and its suppliers, if any. The intellectual and                                             
# technical concepts contained herein are proprietary to One Convergence,                                           
# Inc. and its suppliers.                                                                                           
#                                                                                                                   
# Dissemination of this information or reproduction of this material is                                             
# strictly forbidden unless prior written permission is obtained from
# One Convergence, Inc., USA
#

########################################################################
#    Project: Ansible NSD Install                                      # 
#    Team/Authors:                                                     #                                            
#            Venkat Akkina [venkat.akkina@oneconvergence.com]          #                                            
#            Harshal Wagh  [harshal.wagh@oneconvergence.com]           #                                            
#            Deekshith Patnala [deekshith.patnala@oneconvergence.com]  #                                            
########################################################################    

---
- 
  hosts: build
  sudo: true
  tasks:
    - 
      block:
        - 
          name: "get timestamp"
          register: ts
          shell: "date +%F_%T | tr : -"
        - 
          set_fact: "timestamp={{ts.stdout}}"
      when: "timestamp is not defined"
    - 
      debug: "msg={{timestamp}}"


- 
  hosts: controller
  environment:
    OS_AUTH_URL: "http://{{ inventory_hostname }}:5000/v2.0"
    OS_PASSWORD: "{{os_password}}"
    OS_REGION_NAME: "{{os_region_name}}"
    OS_TENANT_NAME: "{{os_tenant_name}}"
    OS_USERNAME: "{{os_username}}"

  tasks:
    - 
      set_fact: "build_server=\"{{groups['build'][0]}}\""
    - 
      debug: "msg=\"{{build_server}}\""
    - 
      block:
        - 
          set_fact: "build_server={{groups['build'][0]}}"
        - 
          name: Check if External Segment is created
          shell: "gbp es-list | grep default | awk '{print $4}'"
          register: ext_seg

        - fail:
            msg: "External segment is not created"
          when: "ext_seg.stdout == \"\""


        - set_fact: ext_segment={{ext_seg.stdout}}
 
        - debug: var=ext_segment

      when: prereqs == 'true' and ACI_setup == 'false'



- 
  hosts: controller
  environment:
    OS_AUTH_URL: "http://{{ inventory_hostname }}:5000/v2.0"
    OS_PASSWORD: "{{os_password}}"
    OS_REGION_NAME: "{{os_region_name}}"
    OS_TENANT_NAME: "{{os_tenant_name}}"
    OS_USERNAME: "{{os_username}}"

  tasks:
    - 
      set_fact: "build_server=\"{{groups['build'][0]}}\""
    - 
      debug: "msg=\"{{build_server}}\""
    - 
      block:
        - 
          set_fact: "build_server={{groups['build'][0]}}"
        - 
          name: Check if External Segment is created
          shell: "gbp es-list | grep {{ external_segment_name }} | awk '{print $4}'"
          register: ext_seg

        - fail:
            msg: "External segment is not created"
          when: "ext_seg.stdout == \"\""


        - set_fact: ext_segment={{ext_seg.stdout}}

        - debug: var=ext_segment


      when: prereqs == 'true' and ACI_setup == 'true'



- 
  hosts: controller
  environment:
    OS_AUTH_URL: "http://{{ inventory_hostname }}:5000/v2.0"
    OS_PASSWORD: "{{os_password}}"
    OS_REGION_NAME: "{{os_region_name}}"
    OS_TENANT_NAME: "{{os_tenant_name}}"
    OS_USERNAME: "{{os_username}}"

  tasks:
    - 
      set_fact: "build_server=\"{{groups['build'][0]}}\""
    - 
      debug: "msg=\"{{build_server}}\""
    - 
      block:
        - 
          set_fact: "build_server={{groups['build'][0]}}"

        - debug: var=ext_segment

        - 
          name: Configure External Segment name in neutron.conf
          shell: "crudini --set /etc/neutron/neutron.conf group_policy_implicit_policy default_external_segment_name {{ext_segment}}"

        - 
          name: Restart neutron server
          shell: systemctl restart neutron-server

        - ignore_errors: true
          name: Check if nat-pool is created
          shell: "es_id=$(gbp es-show {{ext_segment}} -c id -f value); gbp nat-pool-list | grep $es_id"
          register: res

        - fail:
            msg: "NAT pool is not created with the external segment {{ext_segment}}"
          when: "res.stdout == \"\""

        - 
          name: Configure the localtime with UTC timezone
          shell: ln -sf ../usr/share/zoneinfo/UTC /etc/localtime


      when: prereqs == 'true'



-
  hosts: network
  tasks:

    -
      block:

        - 
          name: Configure the localtime with UTC timezone
          shell: ln -sf ../usr/share/zoneinfo/UTC /etc/localtime

      when: prereqs == 'true'



- 
  hosts: compute
  tasks:
    - 
      set_fact: "build_server=\"{{groups['build'][0]}}\""
    - 
      debug: "msg=\"{{build_server}}\""
    - 
      block:

      - name: yum crudini
        yum: name=crudini state=present

      - 
        name: Configure the localtime with UTC timezone
        shell: ln -sf ../usr/share/zoneinfo/UTC /etc/localtime


      when: prereqs == 'true'

